#Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

import time
import unittest
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.devtools.v85.dom import scroll_into_view_if_needed
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class DeleteAccount(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.driver = webdriver.Chrome()
        cls.driver.maximize_window()
        cls.driver.get("https://demo.guru99.com/V4/index.php")


    def test_a_login(self):
        driver = self.driver
        driver.find_element(By.NAME, "uid").click()
        driver.find_element(By.NAME, "uid").send_keys("mngr602094")
        driver.find_element(By.NAME, "password").click()
        driver.find_element(By.NAME, "password").send_keys("EmEhApa")
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "btnLogin"))).click()

        time.sleep(3)
        driver.find_element(By.LINK_TEXT, "Delete Account").click()

    # id is left empty and then submitted
    def test_b_empty_account_number(self):
        driver = self.driver
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "AccSubmit"))).click()
        time.sleep(3)
        assert driver.switch_to.alert.text == "Please fill all fields"
        driver.switch_to.alert.accept()

    def test_c_account_character(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='accountno']").send_keys("acc123")
        character1 = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//label[@id='message2']")))
        assert "Characters are not allowed" in character1.text, "Does not contain character warning"

        driver.find_element(By.XPATH, "//input[@name='accountno']").clear()
        driver.find_element(By.XPATH, "//input[@name='accountno']").send_keys("123Acc")
        character2 = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//label[@id='message2']")))
        assert "Characters are not allowed" in character2.text, "Does not contain special warning"

    def test_d_account_special_character(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='accountno']").clear()
        driver.find_element(By.XPATH, "//input[@name='accountno']").send_keys("123!@#")
        special1 = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//label[@id='message2']")))
        assert "Special characters are not allowed" in special1.text, "Does not contain character warning"

        driver.find_element(By.XPATH, "//input[@name='accountno']").clear()
        driver.find_element(By.XPATH, "//input[@name='accountno']").send_keys("!@#")
        special2 = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//label[@id='message2']")))
        assert "Special characters are not allowed" in special2.text, "Does not contain special warning"

    def test_e_account_blank_space(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='accountno']").clear()
        driver.find_element(By.XPATH, "//input[@name='accountno']").send_keys("123 2")
        blank_space = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//label[@id='message2']")))
        assert "Characters are not allowed" in blank_space.text, "Does not contain character warning"

    def test_f_account_first_space(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='accountno']").clear()
        driver.find_element(By.XPATH, "//input[@name='accountno']").send_keys(" ")
        blank_space = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//label[@id='message2']")))
        assert "Characters are not allowed" in blank_space.text, "Does not contain character warning"

    def test_g_account_invalid(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='accountno']").clear()
        driver.find_element(By.XPATH, "//input[@name='accountno']").send_keys("12345")
        driver.find_element(By.XPATH,"//input[@name='AccSubmit']").click()
        assert driver.switch_to.alert.text == "Do you really want to delete this Account?"
        driver.switch_to.alert.accept()
        time.sleep(2)
        assert driver.switch_to.alert.text == "Account does not exist"
        driver.switch_to.alert.accept()
        time.sleep(2)

    def test_h_account_valid(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='accountno']").send_keys("141356")
        driver.find_element(By.XPATH, "//input[@name='AccSubmit']").click()
        assert driver.switch_to.alert.text == "Do you really want to delete this Account?"
        driver.switch_to.alert.accept()
        time.sleep(2)

    def test_i_reset_button(self):
        driver = self.driver
        driver.get("https://demo.guru99.com/V4/manager/deleteAccountInput.php")
        time.sleep(2)
        driver.find_element(By.XPATH, "//input[@name='accountno']").send_keys("qwer")
        driver.find_element(By.XPATH, "//input[@name='res']").click()
        account_number = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//input[@name='accountno']")))
        assert "" in account_number.text, "Did not reset"


        driver.find_element(By.XPATH, "//input[@name='accountno']").clear()
        driver.find_element(By.XPATH, "//input[@name='accountno']").send_keys("123456")
        driver.find_element(By.XPATH, "//input[@name='res']").click()
        account_number = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//input[@name='accountno']")))
        assert "" in account_number.text, "Did not reset"





    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()



if __name__ == "__main__":
    unittest.main()