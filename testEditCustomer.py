# Generated by Selenium IDE
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

import time
import unittest
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.devtools.v85.dom import scroll_into_view_if_needed
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class EditingCustomer(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.driver = webdriver.Chrome()
        cls.driver.maximize_window()
        cls.driver.get("https://demo.guru99.com/V4/index.php")

    def scroll_into_view(self, element):
        """Scrolls the element into view to ensure it's interactable."""
        self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", element)

    def test_a_login(self):
        driver = self.driver
        driver.find_element(By.NAME, "uid").click()
        driver.find_element(By.NAME, "uid").send_keys("mngr602094")
        driver.find_element(By.NAME, "password").click()
        driver.find_element(By.NAME, "password").send_keys("EmEhApa")
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "btnLogin"))).click()
        time.sleep(3)
        driver.find_element(By.LINK_TEXT, "Edit Customer").click()

    # id is left empty and then submitted
    def test_b_empty_id(self):
        driver = self.driver
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "// a[contains(text(), 'Edit Customer')]"))).click()
        time.sleep(3)
        WebDriverWait(driver, 10).until(
             EC.element_to_be_clickable((By.NAME, "AccSubmit"))).click()
        time.sleep(3)
        assert driver.switch_to.alert.text == "Please fill all fields"
        driver.switch_to.alert.accept()
        time.sleep(2)



    # Customer ID Must be numeric
    def test_c_id_must_be_numeric(self):
        driver = self.driver
        driver.find_element(By.NAME, "cusid").send_keys("1234Acc")
        time.sleep(2)
        character_warning = WebDriverWait(driver, 10).until(
              EC.presence_of_element_located((By.XPATH, "//label[@id='message14']")))
        assert "Characters are not allowed" in character_warning.text, "Does not contain character warning"

        driver.find_element(By.NAME, "cusid").clear()
        driver.find_element(By.NAME, "cusid").send_keys("Acc123")
        assert "Characters are not allowed" in character_warning.text, "Does not contain character warning"

    def test_d_id_no_special_characters(self):
        driver = self.driver
        driver.find_element(By.NAME, "cusid").clear()
        driver.find_element(By.NAME, "cusid").send_keys("123!@#")
        special_character = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//label[@id='message14']")))
        assert "Special characters are not allowed" in special_character.text, "Does not contain character warning"

        driver.find_element(By.NAME, "cusid").clear()
        driver.find_element(By.NAME, "cusid").send_keys("!@#")
        assert "Special characters are not allowed" in special_character.text, "Does not contain character warning"

    def test_e_valid_customer_id(self):
        driver = self.driver
        driver.find_element(By.NAME, "cusid").clear()
        driver.find_element(By.NAME, "cusid").send_keys("1327")
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "AccSubmit"))).click()
        time.sleep(3)
        edit_customer = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "// p[contains(text(), 'Edit Customer')]")))
        assert "Edit Customer" in edit_customer.text, "Does not contain edit customer"

    def test_f_empty_address(self):
        driver = self.driver
        driver.find_element(By.CSS_SELECTOR, "textarea[name='addr']").clear()
        empty = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message3']")))
        assert "Address Field must not be blank" in empty.text, "Does not contain error message"

    def test_g_empty_city(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='city']").clear()
        empty = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message4']")))
        assert "City Field must not be blank" in empty.text, "Does not contain error message"

    def test_h_numeric_city(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='city']").send_keys("1234")
        numeric1 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message4']")))
        assert "Numbers are not allowed" in numeric1.text, "Does not contain error message"

        driver.find_element(By.XPATH, "//input[@name='city']").clear()
        driver.find_element(By.XPATH, "//input[@name='city']").send_keys("city123")
        numeric2 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message4']")))
        assert "Numbers are not allowed" in numeric2.text, "Does not contain error message"

    def test_i_special_character_city(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='city']").clear()
        driver.find_element(By.XPATH, "//input[@name='city']").send_keys("City!@#")
        special1 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message4']")))
        assert "Special characters are not allowed" in special1.text, "Does not contain error message"

        driver.find_element(By.XPATH, "//input[@name='city']").clear()
        driver.find_element(By.XPATH, "//input[@name='city']").send_keys("!@#")
        special2 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message4']")))
        assert "Special characters are not allowed" in special2.text, "Does not contain error message"

    def test_j_empty_state(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='state']").clear()
        empty = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message5']")))
        assert "State must not be blank" in empty.text, "Does not contain error message"

    def test_k_numeric_state(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='state']").send_keys("1234")
        numeric1 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message5']")))
        assert "Numbers are not allowed" in numeric1.text, "Does not contain error message"

        driver.find_element(By.XPATH, "//input[@name='state']").clear()
        driver.find_element(By.XPATH, "//input[@name='state']").send_keys("State123")
        numeric2 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message5']")))
        assert "Numbers are not allowed" in numeric2.text, "Does not contain error message"

    def test_l_special_character_state(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='state']").clear()
        driver.find_element(By.XPATH, "//input[@name='state']").send_keys("State!@#")
        special1 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message5']")))
        assert "Special characters are not allowed" in special1.text, "Does not contain error message"

        driver.find_element(By.XPATH, "//input[@name='state']").clear()
        driver.find_element(By.XPATH, "//input[@name='state']").send_keys("!@#")
        special2 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message5']")))
        assert "Special characters are not allowed" in special2.text, "Does not contain error message"

    def test_m_character_pin(self):
        driver = self.driver
        pin = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH,"//input[@name='pinno']"))
            )
        self.scroll_into_view(pin)
        pin.clear()
        pin.send_keys("PIN123")
        character1 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message6']")))
        assert "Characters are not allowed" in character1.text, "Does not contain error message"

        pin.clear()
        pin.send_keys("123pin")
        character2 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message6']")))
        assert "Characters are not allowed" in character2.text, "Does not contain error message"

    def test_n_empty_pin(self):
        driver = self.driver
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//input[@name='pinno']"))
            ).clear()
        empty = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message6']")))
        assert "PIN Code must not be blank" in empty.text, "Does not contain error message"

    def test_o_six_digits_pin(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='pinno']").send_keys("123")
        six_digits = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message6']")))
        assert "PIN Code must have 6 Digits" in six_digits.text, "Does not contain error message"

    def test_p_special_character_pin(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='pinno']").clear()
        driver.find_element(By.XPATH, "//input[@name='pinno']").send_keys("!@#")
        special1 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message6']")))
        assert "Special characters are not allowed" in special1.text, "Does not contain error message"

        driver.find_element(By.XPATH, "//input[@name='pinno']").clear()
        driver.find_element(By.XPATH, "//input[@name='pinno']").send_keys("123!@#")
        special2 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message6']")))
        assert "Special characters are not allowed" in special2.text, "Does not contain error message"

    def test_q_empty_mobile(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='telephoneno']").clear()
        empty = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message7']")))
        assert "Mobile no must not be blank" in empty.text, "Does not contain error message"

    def test_r_special_character_mobile(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='telephoneno']").send_keys("886636!@12")
        special1 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message7']")))
        assert "Special characters are not allowed" in special1.text, "Does not contain error message"

        driver.find_element(By.XPATH, "//input[@name='telephoneno']").clear()
        driver.find_element(By.XPATH, "//input[@name='telephoneno']").send_keys("!@88662682")
        special2 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message7']")))
        assert "Special characters are not allowed" in special2.text, "Does not contain error message"

        driver.find_element(By.XPATH, "//input[@name='telephoneno']").clear()
        driver.find_element(By.XPATH, "//input[@name='telephoneno']").send_keys("88663682!@")
        special3 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message7']")))
        assert "Special characters are not allowed" in special3.text, "Does not contain error message"

    def test_s_empty_email(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='emailid']").clear()
        empty = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message9']")))
        assert "Email-ID must not be blank" in empty.text, "Does not contain error message"

    def test_t_format_email(self):
        driver = self.driver
        driver.find_element(By.XPATH, "//input[@name='emailid']").send_keys("guru99@gmail")
        format1 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message9']")))
        assert "Email-ID is not valid" in format1.text, "Does not contain error message"

        driver.find_element(By.XPATH, "//input[@name='emailid']").clear()
        driver.find_element(By.XPATH, "//input[@name='emailid']").send_keys("guru99")
        format2 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message9']")))
        assert "Email-ID is not valid" in format2.text, "Does not contain error message"

        driver.find_element(By.XPATH, "//input[@name='emailid']").clear()
        driver.find_element(By.XPATH, "//input[@name='emailid']").send_keys("Guru99@")
        format3 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message9']")))
        assert "Email-ID is not valid" in format3.text, "Does not contain error message"

        driver.find_element(By.XPATH, "//input[@name='emailid']").clear()
        driver.find_element(By.XPATH, "//input[@name='emailid']").send_keys("gurugmail.con")
        format4 = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//label[@id='message9']")))
        assert "Email-ID is not valid" in format4.text, "Does not contain error message"

    def test_u_submit(self):
        driver = self.driver
        driver.find_element(By.NAME, "res").click()
        time.sleep(2)
        driver.find_element(By.CSS_SELECTOR, "textarea[name='addr']").clear()
        driver.find_element(By.CSS_SELECTOR, "textarea[name='addr']").click()
        driver.find_element(By.CSS_SELECTOR, "textarea[name='addr']").send_keys("2 Isles Street")
        driver.find_element(By.NAME, "sub").click()
        driver.get("https://demo.guru99.com/V4/manager/EditCustomer.php")
        time.sleep(2)
        driver.find_element(By.NAME, "cusid").clear()
        driver.find_element(By.NAME, "cusid").send_keys("1327")
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.NAME, "AccSubmit"))).click()
        time.sleep(2)
        new_address = driver.find_element(By.XPATH, "//textarea[contains(text(),'2 Isles Street')]")
        self.assertIsNotNone(new_address)

    @classmethod
    def tearDownClass(cls):
        cls.driver.quit()



if __name__ == "__main__":
    unittest.main()
